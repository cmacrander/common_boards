// Generated by CoffeeScript 1.6.3
(function() {
  var BuildApp, generateId, includedProperties;

  window.getScope = function() {
    return angular.element($('#main')).scope();
  };

  includedProperties = ['_cbId', '_cbPieceName', '_cbLocked', '_cbOriginalWidth', '_cbOriginalHeight'];

  generateId = function() {
    var chars, l, lowercase, n, numerals, uppercase, x;
    numerals = (function() {
      var _i, _results;
      _results = [];
      for (n = _i = 0; _i <= 9; n = ++_i) {
        _results.push(n + '');
      }
      return _results;
    })();
    uppercase = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
    lowercase = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = uppercase.length; _i < _len; _i++) {
        l = uppercase[_i];
        _results.push(l.toLowerCase());
      }
      return _results;
    })();
    chars = numerals.concat(uppercase).concat(lowercase);
    return ((function() {
      var _i, _results;
      _results = [];
      for (x = _i = 1; _i <= 20; x = ++_i) {
        _results.push(chars[Math.floor(Math.random() * 62)]);
      }
      return _results;
    })()).join('');
  };

  BuildApp = angular.module('BuildApp', []);

  BuildApp.directive('ngMainCanvas', function() {
    return function($scope, element, attrs) {
      var options;
      options = {
        containerClass: 'twelve columns alpha'
      };
      $scope.canvas = new fabric.Canvas(element.attr('id'), options);
      $scope.canvas.setDimensions({
        width: 700,
        height: 644
      });
      $scope.canvas.on('object:selected', function(options) {
        return $scope.$safeApply(function() {
          return $scope.currentPiece = options.target;
        });
      });
      return $scope.canvas.on('selection:cleared', function(options) {
        return $scope.$safeApply(function() {
          return $scope.currentPiece = false;
        });
      });
    };
  });

  BuildApp.directive('ngKitCanvas', function() {
    return function($scope, element, attrs) {
      $scope.kitCanvas = new fabric.Canvas(element.attr('id'));
      $scope.kitCanvas.setDimensions({
        width: 190,
        height: 450
      });
      $scope.kitCanvas.hoverCursor = 'pointer';
      $scope.kitCanvas.on('object:selected', function(options) {
        return $scope.$safeApply(function() {
          return $scope.currentKitPiece = options.target;
        });
      });
      return $scope.kitCanvas.on('selection:cleared', function(options) {
        return $scope.$safeApply(function() {
          return $scope.currentKitPiece = false;
        });
      });
    };
  });

  window.BuildCtrl = function($scope) {
    var dispatchers, handlers, webSocket;
    $scope.$safeApply = function(fn) {
      var phase;
      phase = this.$root.$$phase;
      if (phase === '$apply' || phase === '$digest') {
        if (fn && (typeof fn === 'function')) {
          return fn();
        }
      } else {
        return this.$apply(fn);
      }
    };
    $scope.tabs = {
      tools: {
        selected: true
      },
      props: {
        selected: false
      }
    };
    $scope.kits = {};
    $scope.currentKit = false;
    $scope.gameTypes = {};
    $scope.currentGameType = false;
    $scope.currentPiece = false;
    $scope.currentKitPiece = false;
    $scope.selectTab = function(tabName) {
      var name, t, _ref;
      _ref = $scope.tabs;
      for (name in _ref) {
        t = _ref[name];
        t.selected = false;
      }
      return $scope.tabs[tabName].selected = true;
    };
    $scope.openAddPieceDialog = function() {
      $scope.addPieceName = $scope.addPieceURL = $scope.addPieceSVG = '';
      return $('#add_piece_dialog').dialog('open');
    };
    $scope.addPieceByImage = function(form) {
      if (form.$invalid) {
        return;
      }
      $("#add_piece_dialog").dialog('close');
      return fabric.Image.fromURL($scope.addPieceURL, $scope.addPieceTypeByObject);
    };
    $scope.addPieceBySVG = function(form) {
      if (form.$invalid) {
        return;
      }
      $("#add_piece_dialog").dialog('close');
      return fabric.loadSVGFromString($scope.addPieceSVG, function(objects, options) {
        var o;
        o = fabric.util.groupSVGElements(objects, options);
        return $scope.addPieceTypeByObject(o);
      });
    };
    $scope.addPieceTypeByObject = function(o) {
      var box, column, index, row;
      console.log("adding object to kit", o, $scope.addPieceName);
      o._cbPieceName = $scope.addPieceName;
      o.set('hasControls', false);
      o.lockMovementX = o.lockMovementY = true;
      box = o.getBoundingRect();
      if (box.width > box.height && box.width > 60) {
        o.scaleToWidth(60);
        o._cbOriginalWidth = box.width;
      } else if (box.height >= box.width && box.height > 60) {
        o.scaleToHeight(60);
        o._cbOriginalHeight = box.height;
      }
      index = $scope.kitCanvas.getObjects().length;
      column = index % 2;
      row = Math.floor(index / 2);
      $scope.kitCanvas.add(o);
      o.set('top', row * 60 + 30);
      o.set('left', column * 60 + 30);
      o.setCoords();
      $scope.kitCanvas.renderAll();
      $scope.kitCanvas.calcOffset();
      return console.log("final object");
    };
    $scope.addPieceInstance = function() {
      var clone;
      clone = fabric.util.object.clone($scope.currentKitPiece);
      clone._cbId = generateId();
      clone.set('hasControls', true);
      clone.lockMovementX = clone.lockMovementY = false;
      clone._cbLocked = false;
      if (clone._cbOriginalWidth) {
        clone.scaleToWidth(clone._cbOriginalWidth);
      } else if (clone._cbOriginalHeight) {
        clone.scaleToHeight(clone._cbOriginalHeight);
      }
      $scope.canvas.add(clone);
      clone.center();
      clone.setCoords();
      return $scope.canvas.setActiveObject(clone);
    };
    $scope.lockPiece = function() {
      var o;
      o = $scope.currentPiece;
      o.lockMovementX = o.lockMovementY = o.lockRotation = o.lockScalingX = o.lockScalingY = o.lockUniScaling = o._cbLocked;
      return o.set('hasControls', !o._cbLocked);
    };
    $scope.sendToBack = function() {
      return $scope.canvas.sendToBack($scope.currentPiece);
    };
    $scope.bringToFront = function() {
      return $scope.canvas.bringToFront($scope.currentPiece);
    };
    $scope.displayKit = function() {
      var loadCallback;
      $scope.kitCanvas.clear();
      loadCallback = function() {
        return $scope.kitCanvas.forEachObject(function(o, index) {
          return o.lockMovementX = o.lockMovementY = true;
        });
      };
      return $scope.kitCanvas.loadFromJSON($scope.currentKit.state, loadCallback);
    };
    $scope.displayGameType = function() {
      $scope.canvas.clear();
      return $scope.canvas.loadFromJSON($scope.currentGameType.state);
    };
    $scope.saveKit = function() {
      var kitName;
      kitName = prompt('kit name:');
      return webSocket.saveKit(kitName);
    };
    $scope.saveGameType = function() {
      var gameTypeName;
      gameTypeName = prompt('game name:');
      return webSocket.saveGameType(gameTypeName);
    };
    $scope.deleteKit = function() {
      if (confirm("Delete kit \"" + $scope.currentKit.name + "\"?")) {
        return webSocket.deleteKit($scope.currentKit.id);
      }
    };
    $scope.deleteGameType = function() {
      if (confirm("Delete game \"" + $scope.currentGameType.name + "\"?")) {
        return webSocket.deleteGameType($scope.currentGameType.id);
      }
    };
    $scope.deleteSelectedKitPiece = function() {
      var o;
      o = $scope.kitCanvas.getActiveObject();
      return $scope.kitCanvas.remove(o);
    };
    $scope.deleteSelectedPiece = function() {
      var o;
      o = $scope.canvas.getActiveObject();
      return $scope.canvas.remove(o);
    };
    handlers = {
      kitList: function(msg) {
        return $scope.$apply(function() {
          var kit, _i, _len, _ref, _results;
          $scope.kits = {};
          _ref = msg.data;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            kit = _ref[_i];
            _results.push($scope.kits[kit.id] = kit);
          }
          return _results;
        });
      },
      gameTypeList: function(msg) {
        return $scope.$apply(function() {
          var gameType, _i, _len, _ref, _results;
          $scope.gameTypes = {};
          _ref = msg.data;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            gameType = _ref[_i];
            _results.push($scope.gameTypes[gameType.id] = gameType);
          }
          return _results;
        });
      },
      kitSaved: function(msg) {
        return $scope.$apply(function() {
          console.log("kit saved, id:", msg.kitId, "probably want visual confirmation here.");
          $scope.tempKit.id = msg.kitId;
          $scope.kits[msg.kitId] = $scope.tempKit;
          return delete $scope.tempKit;
        });
      },
      gameTypeSaved: function(msg) {
        return $scope.$apply(function() {
          console.log("gameType saved, id:", msg.gameTypeId, "probably want visual confirmation here.");
          $scope.tempGameType.id = msg.gameTypeId;
          $scope.gameTypes[msg.gameTypeId] = $scope.tempGameType;
          return delete $scope.tempGameType;
        });
      },
      kitDeleted: function(msg) {
        return $scope.$apply(function() {
          console.log("kit deleted, id:", msg.kitId, "probably want visual confirmation here.");
          return delete $scope.kits[msg.kitId];
        });
      },
      gameTypeDeleted: function(msg) {
        return $scope.$apply(function() {
          console.log("gameType deleted, id:", msg.gameTypeId, "probably want visual confirmation here.");
          return delete $scope.gameTypes[msg.gameTypeId];
        });
      }
    };
    dispatchers = {
      listKits: function() {
        return {
          messageType: 'listKits'
        };
      },
      listGameTypes: function() {
        return {
          messageType: 'listGameTypes'
        };
      },
      saveKit: function(kitName) {
        var state;
        state = $scope.kitCanvas.toJSON(includedProperties);
        $scope.tempKit = {
          name: kitName,
          state: state
        };
        return {
          messageType: 'saveKit',
          kitName: kitName,
          state: state
        };
      },
      saveGameType: function(gameTypeName) {
        var state;
        state = $scope.canvas.toJSON(includedProperties);
        $scope.tempGameType = {
          name: gameTypeName,
          state: state
        };
        return {
          messageType: 'saveGameType',
          gameTypeName: gameTypeName,
          state: state
        };
      },
      deleteKit: function(kitId) {
        return {
          messageType: 'deleteKit',
          kitId: kitId
        };
      },
      deleteGameType: function(gameTypeId) {
        return {
          messageType: 'deleteGameType',
          gameTypeId: gameTypeId
        };
      }
    };
    webSocket = window.initializeWebSocket(handlers, dispatchers);
    return webSocket.onopen = function() {
      webSocket.listKits();
      return webSocket.listGameTypes();
    };
  };

  window.ControlCtrl = function($scope) {};

  $(document).ready(function() {
    return $("#add_piece_dialog").dialog({
      autoOpen: false,
      height: 500,
      width: 600,
      modal: true
    });
  });

}).call(this);
