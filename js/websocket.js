// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  window.initializeWebSocket = function(handlers, dispatchers) {
    var f, name, sock, wsuri, _fn;
    if (window.location.protocol === "file:") {
      wsuri = "ws://localhost:9000";
    } else {
      wsuri = "ws://" + window.location.hostname + ":9000";
    }
    if (typeof WebSocket !== "undefined" && WebSocket !== null) {
      sock = new WebSocket(wsuri);
    } else if (typeof MozWebSocket !== "undefined" && MozWebSocket !== null) {
      sock = new MozWebSocket(wsuri);
    } else {
      window.location = "http://autobahn.ws/unsupportedbrowser";
    }
    sock.sendAsJson = function(message) {
      return this.send(JSON.stringify(message));
    };
    sock.onopen = function() {
      return console.log("Default onopen() listener. Connected to " + wsuri);
    };
    sock.onclose = function(e) {
      return console.log("Default onclose() listener. Connection closed " + ("(wasClean = " + e.wasClean + ", ") + ("code = " + e.code + ", reason = '" + e.reason + "')"));
    };
    sock.onmessage = function(e) {
      var message;
      message = JSON.parse(e.data);
      if (message.messageType in this.handlers) {
        return this.handlers[message.messageType](message);
      } else {
        throw new Error("No handler for message type " + message.messageType + ".");
      }
    };
    sock.handlers = handlers;
    _fn = function(name, f) {
      if (name in sock) {
        throw new Error("Dispatcher name collided: " + name + ".");
      } else {
        return sock[name] = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return this.sendAsJson(f.apply(null, args));
        };
      }
    };
    for (name in dispatchers) {
      f = dispatchers[name];
      _fn(name, f);
    }
    return sock;
  };

}).call(this);
